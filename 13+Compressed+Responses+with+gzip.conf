# What this means is when a client requests a resource, typically a static file such as JavaScript or
# access, that client can indicate its ability to accept compressed data.

# All modern browsers being capable of this, meaning we can compress a response on the server, typically
# using Guiseppe, which drastically reduces its size and as a result reduces the time it takes for the
# client to receive that response, which the client or browse in this case then has the responsibility
# of decompressing before rendering it not something we need to be concerned with.
# However, this happens automatically.


user www-data;

worker_processes auto;

events {
  worker_connections 1024;
}

http {

  include mime.types;

  gzip on; # to enable gzip for contant
  gzip_comp_level 3;
  # which is the amount of compression used a lower number resulting in larger files, 
  # but requiring less server resources and a larger number resulting
  # in smaller files but requiring more server resources.
  # best number is 3 or 4

  # types of files to gzip
  gzip_types text/css;
  gzip_types text/javascript;

  server {

    listen 80;
    server_name 167.99.93.26;

    root /sites/demo;

    index index.php index.html;

    location / {
      try_files $uri $uri/ =404;
    }

    location ~* \.(css|js|jpg|png)$ {
      access_log off;
      add_header Cache-Control public; 
      add_header Pragma public;
      add_header Vary Accept-Encoding; # that variation being compressed or uncompressed
      expires 1M; 
    }

  }
}
