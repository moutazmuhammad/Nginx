user www-data;

worker_processes auto;

events {
  worker_connections 1024;
}

http {

  include mime.types;

  #################################
  # Redirect all traffic to HTTPS
  #################################
  server {
    listen 80;
    server_name 167.99.93.26;
    return 301 https://$host$request_uri;
  }

  server {

    listen 443 ssl http2;
    server_name 167.99.93.26;

    root /sites/demo;

    index index.html;

    ssl_certificate /etc/nginx/ssl/self.crt;
    ssl_certificate_key /etc/nginx/ssl/self.key;

    # Disable SSL
    # They're our Https connections now being encrypted using TLS only rather than the older SSL protocol.
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;

    # Optimise cipher suits
    # the selection of preferred cipher suites isn't a very definite selection, and you'll most likely
    # find a number of these combinations on the Internet.
    ssl_prefer_server_ciphers on;
    ssl_ciphers ECDH+AESGCM:ECDH+AES256:ECDH+AES128:DH+3DES:!ADH:!AECDH:!MD5;

    # Enable DH Params
    # Allows your server to perform key exchanges, meaning between the client and the server with perfect secrecy
    # You need to create [dhparam.pem] from command:
      # openssl dhparam 2048 -out /etc/nginx/ssl/dhparam.pem
    ssl_dhparam /etc/nginx/ssl/dhparam.pem;

    # Enable HSTS (enabling strict transport security)
    # This is a header that tells the browser not to load anything of HDB, meaning we can minimize redirects from port to Port 443
    add_header Strict-Transport-Security "max-age=31536000" always;

    # SSL sessions (enable a simple cash for our SSL sessions)
    ssl_session_cache shared:SSL:40m;  # meaning that the session cache is kept in memory and can be accessed by any work process
    ssl_session_timeout 4h; # meaning how long to keep a session cached for
    ssl_session_tickets on; # means provide the browser with a ticket which validates the SSL session
    # his ticket is issued by the server, so it's trusted

    location / {
      try_files $uri $uri/ =404;
    }

    location ~\.php$ {
      # Pass php requests to the php-fpm service (fastcgi)
      include fastcgi.conf;
      fastcgi_pass unix:/run/php/php7.1-fpm.sock;
    }

  }
}
